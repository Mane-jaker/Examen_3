
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUS_OPMINUS_OPleftMULT_OPDIV_OPAND ASSIGN COMMA DECIMAL DIV_OP EQ FLOAT FOR GT HEADER ID IF IN INCLUDE INPUT INT LBRACE LE LPAREN LT MINUS_OP MULT_OP NUMBER PLUS PLUS_OP RANGE RBRACE RETURN RPAREN SEMICOLON STRING TEXT WHILEprogram : includes statementsstatements : statement\n                      | statement statementsincludes : include\n                    | include includesinclude : INCLUDE HEADERstatement : declaration\n                     | assignment\n                     | if_statement\n                     | for_statement\n                     | increment_statement\n                     | return_statement\n                     | function_definitiondeclaration : INT ID ASSIGN expression SEMICOLON\n                       | FLOAT ID ASSIGN expression SEMICOLON\n                       | STRING ID ASSIGN TEXT SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN condition RPAREN LBRACE statements RBRACEfor_statement : FOR LPAREN assignment condition SEMICOLON increment_statement RPAREN LBRACE statements RBRACEcondition : expression EQ expression\n                     | expression GT expression\n                     | expression LT expression\n                     | expression LE expression\n                     | condition AND conditionexpression : NUMBER\n                      | DECIMAL\n                      | ID\n                      | expression PLUS_OP expression\n                      | expression MINUS_OP expression\n                      | expression MULT_OP expression\n                      | expression DIV_OP expressionincrement_statement : ID PLUS\n                               | ID PLUS SEMICOLONreturn_statement : RETURN expression SEMICOLONfunction_definition : INT ID LPAREN RPAREN LBRACE statements RBRACE'
    
_lr_action_items = {'INCLUDE':([0,3,22,],[4,4,-6,]),'$end':([1,5,6,7,8,9,10,11,12,13,23,26,38,45,52,66,68,69,81,82,86,],[0,-1,-2,-7,-8,-9,-10,-11,-12,-13,-3,-32,-33,-34,-17,-14,-15,-16,-35,-18,-19,]),'INT':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[14,-4,14,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,14,-15,-16,14,-35,-18,14,-19,]),'FLOAT':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[16,-4,16,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,16,-15,-16,16,-35,-18,16,-19,]),'STRING':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[17,-4,17,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,17,-15,-16,17,-35,-18,17,-19,]),'ID':([2,3,6,7,8,9,10,11,12,13,14,16,17,20,21,22,25,26,29,30,35,38,39,43,45,46,47,48,49,52,56,57,58,59,60,66,67,68,69,70,76,81,82,84,86,],[15,-4,15,-7,-8,-9,-10,-11,-12,-13,24,27,28,34,-5,-6,34,-32,34,44,34,-33,34,34,-34,34,34,34,34,-17,34,34,34,34,34,-14,15,-15,-16,15,80,-35,-18,15,-19,]),'IF':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[18,-4,18,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,18,-15,-16,18,-35,-18,18,-19,]),'FOR':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[19,-4,19,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,19,-15,-16,19,-35,-18,19,-19,]),'RETURN':([2,3,6,7,8,9,10,11,12,13,21,22,26,38,45,52,66,67,68,69,70,81,82,84,86,],[20,-4,20,-7,-8,-9,-10,-11,-12,-13,-5,-6,-32,-33,-34,-17,-14,20,-15,-16,20,-35,-18,20,-19,]),'HEADER':([4,],[22,]),'RBRACE':([6,7,8,9,10,11,12,13,23,26,38,45,52,66,68,69,77,78,81,82,85,86,],[-2,-7,-8,-9,-10,-11,-12,-13,-3,-32,-33,-34,-17,-14,-15,-16,81,82,-35,-18,86,-19,]),'ASSIGN':([15,24,27,28,44,],[25,35,39,40,25,]),'PLUS':([15,80,],[26,26,]),'LPAREN':([18,19,24,],[29,30,36,]),'NUMBER':([20,25,29,35,39,43,46,47,48,49,52,56,57,58,59,60,],[32,32,32,32,32,32,32,32,32,32,-17,32,32,32,32,32,]),'DECIMAL':([20,25,29,35,39,43,46,47,48,49,52,56,57,58,59,60,],[33,33,33,33,33,33,33,33,33,33,-17,33,33,33,33,33,]),'RPAREN':([26,32,33,34,36,38,41,62,63,64,65,71,72,73,74,75,79,],[-32,-25,-26,-27,51,-33,55,-28,-29,-30,-31,-24,-20,-21,-22,-23,83,]),'SEMICOLON':([26,31,32,33,34,37,50,53,54,61,62,63,64,65,71,72,73,74,75,],[38,45,-25,-26,-27,52,66,68,69,76,-28,-29,-30,-31,-24,-20,-21,-22,-23,]),'PLUS_OP':([31,32,33,34,37,42,50,53,62,63,64,65,72,73,74,75,],[46,-25,-26,-27,46,46,46,46,-28,-29,-30,-31,46,46,46,46,]),'MINUS_OP':([31,32,33,34,37,42,50,53,62,63,64,65,72,73,74,75,],[47,-25,-26,-27,47,47,47,47,-28,-29,-30,-31,47,47,47,47,]),'MULT_OP':([31,32,33,34,37,42,50,53,62,63,64,65,72,73,74,75,],[48,-25,-26,-27,48,48,48,48,48,48,-30,-31,48,48,48,48,]),'DIV_OP':([31,32,33,34,37,42,50,53,62,63,64,65,72,73,74,75,],[49,-25,-26,-27,49,49,49,49,49,49,-30,-31,49,49,49,49,]),'EQ':([32,33,34,42,62,63,64,65,],[-25,-26,-27,57,-28,-29,-30,-31,]),'GT':([32,33,34,42,62,63,64,65,],[-25,-26,-27,58,-28,-29,-30,-31,]),'LT':([32,33,34,42,62,63,64,65,],[-25,-26,-27,59,-28,-29,-30,-31,]),'LE':([32,33,34,42,62,63,64,65,],[-25,-26,-27,60,-28,-29,-30,-31,]),'AND':([32,33,34,41,61,62,63,64,65,71,72,73,74,75,],[-25,-26,-27,56,56,-28,-29,-30,-31,56,-20,-21,-22,-23,]),'TEXT':([40,],[54,]),'LBRACE':([51,55,83,],[67,70,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'includes':([0,3,],[2,21,]),'include':([0,3,],[3,3,]),'statements':([2,6,67,70,84,],[5,23,77,78,85,]),'statement':([2,6,67,70,84,],[6,6,6,6,6,]),'declaration':([2,6,67,70,84,],[7,7,7,7,7,]),'assignment':([2,6,30,67,70,84,],[8,8,43,8,8,8,]),'if_statement':([2,6,67,70,84,],[9,9,9,9,9,]),'for_statement':([2,6,67,70,84,],[10,10,10,10,10,]),'increment_statement':([2,6,67,70,76,84,],[11,11,11,11,79,11,]),'return_statement':([2,6,67,70,84,],[12,12,12,12,12,]),'function_definition':([2,6,67,70,84,],[13,13,13,13,13,]),'expression':([20,25,29,35,39,43,46,47,48,49,56,57,58,59,60,],[31,37,42,50,53,42,62,63,64,65,42,72,73,74,75,]),'condition':([29,43,56,],[41,61,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> includes statements','program',2,'p_program','analizador_2.py',111),
  ('statements -> statement','statements',1,'p_statements','analizador_2.py',115),
  ('statements -> statement statements','statements',2,'p_statements','analizador_2.py',116),
  ('includes -> include','includes',1,'p_includes','analizador_2.py',123),
  ('includes -> include includes','includes',2,'p_includes','analizador_2.py',124),
  ('include -> INCLUDE HEADER','include',2,'p_include','analizador_2.py',131),
  ('statement -> declaration','statement',1,'p_statement','analizador_2.py',135),
  ('statement -> assignment','statement',1,'p_statement','analizador_2.py',136),
  ('statement -> if_statement','statement',1,'p_statement','analizador_2.py',137),
  ('statement -> for_statement','statement',1,'p_statement','analizador_2.py',138),
  ('statement -> increment_statement','statement',1,'p_statement','analizador_2.py',139),
  ('statement -> return_statement','statement',1,'p_statement','analizador_2.py',140),
  ('statement -> function_definition','statement',1,'p_statement','analizador_2.py',141),
  ('declaration -> INT ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration','analizador_2.py',145),
  ('declaration -> FLOAT ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration','analizador_2.py',146),
  ('declaration -> STRING ID ASSIGN TEXT SEMICOLON','declaration',5,'p_declaration','analizador_2.py',147),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','analizador_2.py',159),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','analizador_2.py',175),
  ('for_statement -> FOR LPAREN assignment condition SEMICOLON increment_statement RPAREN LBRACE statements RBRACE','for_statement',10,'p_for_statement','analizador_2.py',179),
  ('condition -> expression EQ expression','condition',3,'p_condition','analizador_2.py',183),
  ('condition -> expression GT expression','condition',3,'p_condition','analizador_2.py',184),
  ('condition -> expression LT expression','condition',3,'p_condition','analizador_2.py',185),
  ('condition -> expression LE expression','condition',3,'p_condition','analizador_2.py',186),
  ('condition -> condition AND condition','condition',3,'p_condition','analizador_2.py',187),
  ('expression -> NUMBER','expression',1,'p_expression','analizador_2.py',194),
  ('expression -> DECIMAL','expression',1,'p_expression','analizador_2.py',195),
  ('expression -> ID','expression',1,'p_expression','analizador_2.py',196),
  ('expression -> expression PLUS_OP expression','expression',3,'p_expression','analizador_2.py',197),
  ('expression -> expression MINUS_OP expression','expression',3,'p_expression','analizador_2.py',198),
  ('expression -> expression MULT_OP expression','expression',3,'p_expression','analizador_2.py',199),
  ('expression -> expression DIV_OP expression','expression',3,'p_expression','analizador_2.py',200),
  ('increment_statement -> ID PLUS','increment_statement',2,'p_increment_statement','analizador_2.py',207),
  ('increment_statement -> ID PLUS SEMICOLON','increment_statement',3,'p_increment_statement','analizador_2.py',208),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','analizador_2.py',216),
  ('function_definition -> INT ID LPAREN RPAREN LBRACE statements RBRACE','function_definition',7,'p_function_definition','analizador_2.py',220),
]
